#!/usr/bin/env python
import rospy
from nav_msgs.msg import OccupancyGrid
import numpy as np
#import scipy.misc.pilutil as smp
import Image

def callback(data):
    global tmp
    if tmp==0:
	nonzero=0
    	#rospy.loginfo(rospy.get_name() + "\nMESSAGE:\n%s" % str(data.info))
	print "\nMESSAGE:\n%s" % str(data.info)
	array_length = len(data.data)
	print "\nMAP ARRAY LENGTH:\n%s " % str(array_length)
	
	for element in data.data:
	    if element != -1:
		#print str(element)
		nonzero+=1
	
	print "\nKNOWN ELEMENTS: %s" % nonzero	
	print "\nUNKNOWN ELEMENTS: %s" % (array_length-nonzero)
	
	color_data = translate_data(data.data)
	im=Image.new('RGB', (4000,4000))
	im.putdata(color_data)
	filename='test.png'
	im.save(filename)
	print "Map file exported: %s" % filename


def listener():
    rospy.init_node('listener', anonymous=True)
    rospy.Subscriber("map", OccupancyGrid, callback)
    rospy.spin()

# translate an OccupancyGrid to RGB values
def translate_data(array):
    color_array=[]
    length = len(array)
    for i in range(length):
	if array[length-i]==-1:
	    #unknown
	    color_array.append((100,100,100))
	elif array[length-i]==0:
	    #free
	    color_array.append((205,205,205))
	else:
	    #blocked
	    color_array.append((0,0,0))
    #color_array.reverse()
    return color_array


if __name__ == '__main__':    
    tmp=0
    listener()
